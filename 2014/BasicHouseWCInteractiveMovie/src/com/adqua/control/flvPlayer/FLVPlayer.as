package com.adqua.control.flvPlayer {	import com.adqua.control.flvPlayer.controls.AreaSeekBarControl;			import flash.display.SimpleButton;			import com.adqua.movieclip.Frame;		import com.adqua.control.flvPlayer.controls.SeekBarControl;		import flash.display.Sprite;		import flash.display.MovieClip;		import flash.events.MouseEvent;		import flash.display.DisplayObject;		import com.adqua.control.flvPlayer.events.MovieStatusEvent;		import com.adqua.control.flvPlayer.controls.BarControl;	import com.adqua.control.flvPlayer.events.SeekEvent;		/**	 * @author philip	 */	public class FLVPlayer extends BasicPlayer 	{		private var _playBtn:DisplayObject;		private var _stopBtn:DisplayObject;		private var _playBar:Sprite;		private var playControl:BarControl;		private var _downBar:Sprite;		private var downControl:BarControl;		private var _muteBtn:DisplayObject;		private var _seekBtn:Sprite;		private var _seekArea:Sprite;		private var isSeeking:Boolean;		public function FLVPlayer(fmsURL:String = null, videoWidth:Number = NaN, videoHeight:Number = NaN, loop:Boolean = false, playBtn:DisplayObject = null, stopBtn:DisplayObject = null, playBar:Sprite = null, downBar:Sprite = null, muteBtn:Sprite = null, seekBtn:Sprite = null, seekArea:Sprite = null)		{			if (seekArea && downBar) 			{				_downBar = downBar;				this.seekArea = seekArea;			}			else this.downBar = downBar;						this.seekBtn = seekBtn;			this.muteBtn = muteBtn;			this.stopBtn = stopBtn;			this.playBtn = playBtn;			this.playBar = playBar;						addEventListener(MovieStatusEvent.CREATE_VIDEO, setControl);			addEventListener(MovieStatusEvent.STATUS_EVENT, videoStatusHandler);			addEventListener(MovieStatusEvent.MUTE, muteChangeHandler);			addEventListener(MovieStatusEvent.PLAY_STATUS_EVENT, videoPlayStatusHandler);						super(fmsURL, videoWidth, videoHeight, loop);		}				private function muteChangeHandler(event:MovieStatusEvent):void		{			if (_muteBtn)			{				var _mc:MovieClip = _muteBtn as MovieClip;				if (_mc) Frame.control(_mc, mute ? _mc.totalFrames : 1);			}		}		private function setControl(event:MovieStatusEvent = null):void		{			var mc:MovieClip;			var btn:DisplayObject;			var btnArea:SimpleButton;						if (_playBtn) 			{				btn = _playBtn;				mc = _playBtn as MovieClip;				if (mc)	btnArea = mc.getChildByName("btn") as SimpleButton;				if (btnArea) btn = btnArea;				else mc.buttonMode = true;				btn.addEventListener(MouseEvent.CLICK, playHandler);			}			if (_stopBtn) 			{				btn = _stopBtn;				mc = _stopBtn as MovieClip;				if (mc)	btnArea = mc.getChildByName("btn") as SimpleButton;				if (btnArea) btn = btnArea;				else mc.buttonMode = true;				btn.addEventListener(MouseEvent.CLICK, stopHandler);			}			if (_muteBtn) 			{				btn = _muteBtn;				mc = _muteBtn as MovieClip;				if (mc)	btnArea = mc.getChildByName("btn") as SimpleButton;				if (btnArea) btn = btnArea;				else mc.buttonMode = true;				_muteBtn.addEventListener(MouseEvent.CLICK, muteHandler);			}		}		private function playHandler(event:MouseEvent):void		{			var _mc:MovieClip = _playBtn as MovieClip;						if (!source)			{				dispatchEvent(new MovieStatusEvent(MovieStatusEvent.BLANK_SOURCE));				return;			}						if (nowState == "play") 			{				pause(true);				if (_mc) Frame.control(_mc, 1);				if (_playBar) playControl.stop();			}			else if (nowState == "pause") 			{				pause(false);				if (_mc) Frame.control(_mc, _mc.totalFrames);				if (_playBar) playControl.play();			}			else if (nowState == "stop") 			{				btnEnable(_stopBtn, true);				play();			}		}		private function stopHandler(event:MouseEvent):void		{			if (nowState != "stop") 			{				stop();				var _mc:MovieClip = _playBtn as MovieClip;				if (_mc) Frame.control(_mc, 1);				if (_playBar) playControl.reset();								btnEnable(_stopBtn, false);			}		}				private function btnEnable(_btn:DisplayObject, state:Boolean):void		{			if (_btn)			{				var mc:MovieClip = _btn as MovieClip;				if (mc) Frame.control(mc, state ? mc.totalFrames : 1);				mc.mouseEnabled = state;			}		}		private function muteHandler(event:MouseEvent):void		{			mute = !mute;			var _mc:MovieClip = _muteBtn as MovieClip;			if (_mc) Frame.control(_mc, mute ? _mc.totalFrames : 1);		}		private function videoPlayStatusHandler(event:MovieStatusEvent):void		{			switch(event.code)			{				case MovieStatusEvent.NETSTREAM_PLAY_COMPLETE : 					nowState = "stop";					if (_playBar && !isSeeking) playControl.stop();					if (_downBar) downControl.stop();					if (_playBtn is MovieClip) 					{						_playBtn["prevFrame"]();						btnEnable(_stopBtn, false);					}					break;			}		}		private function videoStatusHandler(event:MovieStatusEvent):void		{			var _btn:MovieClip = _playBtn as MovieClip;			switch(event.code)			{				case MovieStatusEvent.NETSTREAM_PLAY_START :										if (_btn && (fmsURL && nowState == "play") || !fmsURL) 					{						Frame.control(_btn, _btn.totalFrames);						btnEnable(_stopBtn, true);					}					if (_playBar && !isSeeking) playControl.play();					if (_downBar) downControl.play();					break;									case MovieStatusEvent.NETSTREAM_PLAY_STOP :					if (!loop) 					{						if (_btn) 						{							Frame.control(_btn, 1);							btnEnable(_stopBtn, false);						}						if (!fmsURL)						{							if (_playBar) playControl.stop();							if (_downBar) downControl.stop();						}					}					break;								case MovieStatusEvent.PAUSE :					if (_btn) 					{						Frame.control(_btn, 1);					}					break;								case MovieStatusEvent.RESUME :					if (_btn) 					{						Frame.control(_btn, _btn.totalFrames);					}					break;			}		}		private function seekHandler(event:SeekEvent):void		{			if (_playBar) playControl.adjust(event.per);						if ((event.state == "up" && fmsURL) || !fmsURL) 			{				ns.seek(event.per * duration);			}						if (event.state == "down")			{				isSeeking = true;				playControl.pause();			}			else if (event.state == "up")			{				isSeeking = false;				if (nowState == "play") playControl.resume();				btnEnable(_stopBtn, true);			}		}		public function set playBtn(playBtn:DisplayObject):void		{			_playBtn = playBtn;			var pBtn:MovieClip = _playBtn as MovieClip;			if (pBtn) 			{				if (nowState == "play")				{					pBtn.gotoAndStop(pBtn.totalFrames);				}				else				{					pBtn.gotoAndStop(1);				}			}			setControl();		}		public function set stopBtn(stopBtn:DisplayObject):void		{			_stopBtn = stopBtn;			var sBtn:MovieClip = _stopBtn as MovieClip;			if (sBtn) 			{				if (nowState == "play" || nowState == "pause")				{					sBtn.gotoAndStop(sBtn.totalFrames);				}				else				{					sBtn.gotoAndStop(1);				}			}			setControl();		}		public function set playBar(playBar:Sprite):void		{			_playBar = playBar;			if (_playBar) 			{				_playBar.mouseEnabled = false;				_playBar.mouseChildren = false;								if (playControl) 				{					playControl.stop();					playControl.bar = playBar;					playControl.seekBtn = _seekBtn;				}				else 				{					playControl = new BarControl(_playBar, this, _seekBtn);					playControl.reset();					playControl.addEventListener(SeekEvent.SEEK, seekHandler);				}			}			setControl();		}		public function set downBar(downBar:Sprite):void		{			_downBar = downBar;			if (_downBar) 			{				if (downControl) 				{					downControl.dispose();					downControl.removeEventListener(SeekEvent.SEEK, seekHandler);				}								if (_seekArea)				{					downControl = new AreaSeekBarControl(_downBar, _seekArea, this, fmsURL);				}				else				{					downControl = new SeekBarControl(_downBar, this, fmsURL);				}				if (!fmsURL) downControl.reset();				downControl.addEventListener(SeekEvent.SEEK, seekHandler);			}			setControl();		}				public function set muteBtn(muteBtn:DisplayObject):void		{			_muteBtn = muteBtn;			if (_muteBtn is MovieClip) 			{				_muteBtn["buttonMode"] = true;				if (mute)				{					_muteBtn["gotoAndStop"](_muteBtn["totalFrames"]);				}				else				{					_muteBtn["gotoAndStop"](1);				}			}			setControl();		}				public function set seekBtn(seekBtn:Sprite):void		{			_seekBtn = seekBtn;			playBar = _playBar;		}				public function get seekArea():Sprite		{			return _seekArea;		}				public function set seekArea(seekArea:Sprite):void		{			_seekArea = seekArea;						if (downControl) 			{				downControl.dispose();				downControl.removeEventListener(SeekEvent.SEEK, seekHandler);			}						if (_downBar && _seekArea) 			{				downControl = new AreaSeekBarControl(_downBar, _seekArea, this, fmsURL);				if (!fmsURL) downControl.reset();				downControl.addEventListener(SeekEvent.SEEK, seekHandler);			}		}	}}