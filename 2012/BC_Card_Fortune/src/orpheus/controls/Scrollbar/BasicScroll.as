package orpheus.controls.Scrollbar {	import flash.events.EventDispatcher;	
	
	import orpheus.controls.Scrollbar.events.ScrollEvent;			import flash.events.MouseEvent;		import flash.geom.Rectangle;		import flash.display.DisplayObject;		import flash.display.Sprite;		/**	 * @author philip	 */	public class BasicScroll extends EventDispatcher 	{		protected var btn:Sprite;		protected var rect:Rectangle;		protected var _value:Number;		protected var _direction:String;		protected var _type:String;		private var _btnSize:Number;		protected var oriRect:Rectangle;		protected var _wheelArea:DisplayObject;		protected var _mouseWheel:Boolean;		private var _speed:Number = 5;		private var _wheelSpeedSensibility:Number = 30;		public function BasicScroll(btn:Sprite, rect:Rectangle, wheelArea:DisplayObject = null, mouseWheel:Boolean = false )		{			this.rect = rect;			this.btn = btn;			this.wheelArea = wheelArea;			this.mouseWheel = mouseWheel;						btn.buttonMode = true;			_direction = (rect.width > rect.height) ? "x" : "y";			_type = (rect.width > rect.height) ? "width" : "height";			oriRect = rect.clone();						btn.addEventListener(MouseEvent.MOUSE_DOWN, startDragHandler);		}				private function startDragHandler(event:MouseEvent):void		{			dispatchEvent(new ScrollEvent(ScrollEvent.MOUSE_DOWN));			stopTween();			btn.startDrag(false, rect);			btn.stage.addEventListener(MouseEvent.MOUSE_UP, stopDragHandler);			btn.stage.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}
		
		protected function stopTween():void
		{		}
		protected function moveHandler(event:MouseEvent = null):void		{			var tmp:Number = getValue();			if (_value == tmp) return;			_value = tmp;			dispatchEvent(new ScrollEvent(ScrollEvent.CHANGE, _value));		}				protected function getValue():Number		{			return (btn[_direction] - rect[_direction]) / rect[_type];		}		protected function stopDragHandler(event:MouseEvent = null):void		{			dispatchEvent(new ScrollEvent(ScrollEvent.MOUSE_UP));			btn.stopDrag();			btn.stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragHandler);			btn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);						adjust();		}
		
		protected function adjust():void
		{		}		public function setSize(contentWidth:Number, maskSize:Number = NaN):void		{			btnSize = maskSize / contentWidth * rect[_type];			areaAdjust();		}				protected function areaAdjust():void		{			rect[_type] = oriRect[_type] - btnSize;			speed = btnSize / rect[_type] * _wheelSpeedSensibility;			}		public function get wheelSpeedSensibility():Number		{			return _wheelSpeedSensibility;		}				public function set wheelSpeedSensibility(wheelSpeedSensibility:Number):void		{			_wheelSpeedSensibility = wheelSpeedSensibility;		}		public function get value():Number		{			return _value;		}				public function set value(value:Number):void		{			_value = value;			btn[_direction] = _value * rect[_type] + rect[_direction];		}				public function get btnSize():Number		{			return _btnSize;		}				public function set btnSize(btnSize:Number):void		{			_btnSize = btnSize;			btn[_type] = btnSize;						areaAdjust();			checkBtnLocation();		}				private function checkBtnLocation():void		{			if (btn[_direction] > rect[_direction] + rect[_type]) btn[_direction] = rect[_direction] + rect[_type];			else if (btn[_direction] < rect[_direction]) btn[_direction] = rect[_direction];		}		public function get wheelArea():DisplayObject		{			return _wheelArea;		}				public function set wheelArea(wheelArea:DisplayObject):void		{			_wheelArea = wheelArea;		}				public function get mouseWheel():Boolean		{			return _mouseWheel;		}				public function set mouseWheel(mouseWheel:Boolean):void		{			_mouseWheel = mouseWheel;			if (_mouseWheel)			{				if (btn.stage) btn.stage.addEventListener(MouseEvent.MOUSE_WHEEL, wheelHandler);			}			else			{				if (btn.stage) btn.stage.removeEventListener(MouseEvent.MOUSE_WHEEL, wheelHandler);			}		}				protected function wheelHandler(event:MouseEvent):void		{			if (btn.stage) if (btn.stage.hasEventListener(MouseEvent.MOUSE_UP)) stopDragHandler();						var wheelCheck:Boolean = false;			if (_mouseWheel && btn.stage)			{				if (_wheelArea)				{					if (_wheelArea.hitTestPoint(btn.stage.mouseX, btn.stage.mouseY))					{						wheelCheck = true;					}				}				else				{					wheelCheck = true;				}			}			if (wheelCheck)			{				var plus:Number = (event.delta > 0) ? _speed : -_speed;				if (_direction == "x") btn[_direction] += plus;				else btn[_direction] -= plus;				checkBtnLocation();				moveHandler();								var tmp:Number = getValue();				if (_value == tmp) return;								dispatchEvent(new ScrollEvent(ScrollEvent.CHANGE, _value));				dispatchEvent(new ScrollEvent(ScrollEvent.MOUSE_WHEEL, plus));			}		}				public function get speed():Number		{			return _speed;		}				public function set speed(speed:Number):void		{			_speed = speed;		}	}}