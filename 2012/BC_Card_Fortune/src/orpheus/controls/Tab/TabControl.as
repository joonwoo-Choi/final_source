package orpheus.controls.Tab {	import flash.display.MovieClip;			import orpheus.controls.btn.BtnControl;		import orpheus.controls.btn.events.BtnEvent;		import flash.display.DisplayObjectContainer;		import flash.events.Event;		import flash.display.Sprite;		/**	 * @author philip	 * MZ package 1.0	 * 	 * 탭 활성화 클래스	 * 	 * 무비클립의 Base Class로 활용 하거나	 * MZ.controls.TabControl	 * 	 * 객체 생성시 탭 무비클립을 매개변수로 전달하여 사용	 * var tabControl:TabControl = new TabControl(tabMc);	 * tabControl.addEventListener(TabEvent.CHANGE, changeHandler);	 * tabControl.selectNum = 2;	 * tabControl.mouseOver = false //default  - 마우스 오버시 활성화 (현재 선택된 메뉴는 계속 활성화)	 * function changeHandler(e:TabEvent):void	 * {	 * 	   trace(e.selectTab);	 * }	 * 	 * 버튼의 이름은 tab 으로 시작되어야 한다. tab0 ~ tab(n)	 */	 	public class TabControl extends Sprite 	{		private var main:DisplayObjectContainer;		private var _selectNum:int;		private var _mouseOver:Boolean = false;		private var _againClick:Boolean = false;		private var _fixSelected:Boolean = false;		private var controlArr:Array = new Array();		private var selectTg:BtnControl;		private var _enabled:Boolean = true;		public function TabControl(mc:DisplayObjectContainer = null)		{			main = (mc == null) ? this : mc;			btnEnable();		}				private function btnEnable():void		{			var num:uint = main.numChildren;			for(var i:uint = 0; i < num; i++)			{				var mc:MovieClip = main.getChildAt(i) as MovieClip;				if (mc)				{					var control:BtnControl = new BtnControl(mc, i);					controlArr.push(control);					control.addEventListener(BtnEvent.CLICK, clickHandler);					control.addEventListener(BtnEvent.ROLL_OVER, overHandler);					control.addEventListener(BtnEvent.ROLL_OUT, outHandler);					control.mouseOver = mouseOver;				}			}		}				private function outHandler(event:BtnEvent):void		{			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				if (control == selectTg) control.selected = true;				else control.selected = false;			}		}		private function overHandler(event:BtnEvent):void		{			var tg:BtnControl = event.target as BtnControl;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				if (control == tg || (selectTg == control && fixSelected)) control.selected = true;				else control.selected = false;			}		}		private function clickHandler(event:BtnEvent):void		{			var tg:BtnControl = event.target as BtnControl;						selectTg = tg;			_selectNum = event.data;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				if (control == tg) 				{					control.selected = true;					if (!againClick) control.enabled = false;				}				else 				{					control.selected = false;					if (!againClick) control.enabled = true;				}			}			dispatchEvent(new TabEvent(TabEvent.CLICK, event.data));			dispatchEvent(new TabEvent(TabEvent.CHANGE, event.data));		}		public function get selectNum():int		{			return _selectNum;		}				public function set selectNum(selectNum:int):void		{			_selectNum = selectNum;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				if (i == selectNum) control.selected = true;				else control.selected = false;			}		}				public function get mouseOver():Boolean		{			return _mouseOver;		}				public function set mouseOver(mouseOver:Boolean):void		{			_mouseOver = mouseOver;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				control.mouseOver = _mouseOver;			}		}				public function get fixSelected():Boolean		{			return _fixSelected;		}				public function set fixSelected(fixSelected:Boolean):void		{			_fixSelected = fixSelected;		}				public function get againClick():Boolean		{			return _againClick;		}				public function set againClick(againClick:Boolean):void		{			_againClick = againClick;		}
		
		public function change(num:int):void
		{			selectNum = num;			dispatchEvent(new TabEvent(TabEvent.CHANGE, _selectNum));		}				public function reset():void		{			selectTg = null;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				control.selected = false;				control.enabled = true;			}		}				public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(enabled:Boolean):void		{			_enabled = enabled;			for (var i:uint = 0; i < controlArr.length; i++) 			{				var control:BtnControl = controlArr[i];				if (enabled)				{					control.enabled = (selectTg == control && !againClick) ? false : true;				}				else				{					control.enabled = false;				}				if (control == selectTg) control.selected = true;				else control.selected = false;			}		}	}}