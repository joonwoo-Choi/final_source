package adqua.control.flvPlayer.controls {	import flash.geom.Point;		import adqua.control.flvPlayer.events.SeekEvent;		import flash.events.MouseEvent;		import flash.events.EventDispatcher;		import adqua.control.flvPlayer.FLVPlayer;		import flash.display.Sprite;		import flash.events.TimerEvent;		import adqua.control.flvPlayer.BasicStream;		import flash.display.DisplayObject;		/**	 * @author philip	 */	public class SeekBarControl extends BarControl	{		private var defaultWidth:Number;		private var fmsURL:String;		private var oldStatus:String;		private var clickPoint:Point;		private var defaultX:Number;		public function SeekBarControl(bar:Sprite = null, stream:FLVPlayer = null, fmsURL:String = "")		{			super(bar, stream);						this.fmsURL = fmsURL;			defaultWidth = bar.width;			if (fmsURL) act = false;			bar.addEventListener(MouseEvent.MOUSE_DOWN, seekHandler);			clickPoint = new Point();		}		private function seekHandler(event:MouseEvent):void		{			if (!stream.source) return;			if(!fmsURL && stream.nowState == "stop") stream.play();			getDefaultX();						oldStatus = stream.nowState;			stream.pause(true, true);			var clickX:Number = event.stageX - defaultX;			var tg:Number = clickX / defaultWidth;			dispatchEvent(new SeekEvent(SeekEvent.SEEK, tg, "down"));			bar.stage.addEventListener(MouseEvent.MOUSE_UP, upHandler, false, 0, true);			bar.stage.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler, false, 0, true);		}		private function getDefaultX():void		{			var p:Point = new Point();			p = bar.localToGlobal(p);			defaultX = p.x;		}		private function moveHandler(event:MouseEvent):void		{			var clickX:Number = event.stageX - defaultX;			var tg:Number = clickX / defaultWidth;			dispatchEvent(new SeekEvent(SeekEvent.SEEK, tg));							clickPoint.x = clickX;			clickPoint.y = 0;		}		private function upHandler(event:MouseEvent):void		{			if (oldStatus == "play") stream.pause(false, true);			var clickX:Number = event.stageX - defaultX;			var tg:Number = clickX / defaultWidth;			dispatchEvent(new SeekEvent(SeekEvent.SEEK, tg, "up"));			bar.stage.removeEventListener(MouseEvent.MOUSE_UP, upHandler);			bar.stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}		override protected function timerHandler(event:TimerEvent):void		{			var scale:Number = stream.ns.bytesLoaded / stream.ns.bytesTotal;			if (!isNaN(scale)) bar.scaleX = scale;			if (bar.scaleX == 1) stop();		}		override protected function removeEvent():void		{			bar.removeEventListener(MouseEvent.MOUSE_DOWN, seekHandler);			bar.stage.removeEventListener(MouseEvent.MOUSE_UP, upHandler);			bar.stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}	}}