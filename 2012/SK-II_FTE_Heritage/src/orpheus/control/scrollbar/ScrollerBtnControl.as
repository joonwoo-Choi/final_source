package orpheus.control.scrollbar {	import orpheus.control.scrollbar.events.ScrollerEvent;	import adqua.util.MathUtil;		import com.greensock.TweenLite;	import com.greensock.easing.Cubic;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;
		/**	 * @author philip	 */	public class ScrollerBtnControl extends EventDispatcher	{		private var btn:MovieClip;		private var area:DisplayObject;		private var moveArea:Number;		private var dragRect:Rectangle;		private var upBtn:MovieClip;		private var downBtn:MovieClip;		private var scrollDirection:Number;		private var timer:Timer;		private var speed:Number;		private var wheelSpeedRate:Number;		private var wheelTg:Number = -999999;		private var wheelarea:DisplayObject;		private var cMc:DisplayObject;		private var control:ScrollControl;		private var step:Number = 0;				public function ScrollerBtnControl(_control:ScrollControl, cm:DisplayObject, smc:MovieClip, _area:DisplayObject)		{			control = _control;			wheelarea = _area;						cMc = cm;			btn = smc["btn"];			area = smc["area"];			upBtn = smc.getChildByName("upBtn") as MovieClip;			downBtn = smc.getChildByName("downBtn") as MovieClip;		}		public function reset():void		{			btn.visible = true;			btn.y = control.btnDefaultY;			moveArea = area.height - btn.height;			step = (control.step > 1) ? moveArea / (control.step - 1) : 0;						dragRect = new Rectangle(btn.x, btn.y, 0, moveArea);						btn.addEventListener(MouseEvent.MOUSE_DOWN, downHandler);			//btn.buttonMode = true;			area.addEventListener(MouseEvent.MOUSE_DOWN, areaClick);						timer = new Timer(10);			timer.addEventListener(TimerEvent.TIMER, timerHandler);							if (upBtn != null)			{				upBtn.addEventListener(MouseEvent.MOUSE_DOWN, upBtnDown);				//upBtn.buttonMode = true;			}						if (downBtn != null)			{				downBtn.addEventListener(MouseEvent.MOUSE_DOWN, downBtnDown);				//downBtn.buttonMode = true;			}						if (control.wheelEnabled && btn.stage != null)			{				btn.stage.addEventListener(MouseEvent.MOUSE_WHEEL, wheelHandler);				wheelSpeedRate = btn.height / moveArea * control.wheelSpeed;			}		}		private function wheelHandler(e:MouseEvent):void		{			if (btn.stage == null) return;			if (wheelarea != null && !wheelarea.hitTestPoint(btn.stage.mouseX, btn.stage.mouseY, true)) return;						dispatchEvent(new ScrollerEvent(ScrollerEvent.STOP));						if (step > 0) 			{				stepMove(e.delta);			}			else			{				if (wheelTg == -999999) wheelTg = btn.y;							timer.stop();				if (e.delta < 0)				{					wheelTg += control.wheelSpeed;				}				else				{					wheelTg -= control.wheelSpeed;				}								wheelTg = checkBtnLocation(wheelTg);				btnScroll(wheelTg);			}		}				private function stepMove(num:Number):void		{			var tg:Number;			if (num < 0)			{				tg = btn.y + step;			}			else			{				tg = btn.y - step;			}			tg = checkBtnLocation(tg);						tg = MathUtil.multipleRound(tg, step);			btnScroll(tg);		}		private function timerHandler(event:TimerEvent):void		{			if (speed < 6) speed += 0.5;			btn.y += scrollDirection * speed;			btn.y = checkBtnLocation(btn.y);						moveHandler();		}		private function checkBtnLocation(tg:Number):Number		{			if (tg < control.btnDefaultY) return control.btnDefaultY;			if (tg > control.btnDefaultY + moveArea) return control.btnDefaultY + moveArea;			return tg;			}		private function upBtnDown(e:MouseEvent):void		{			var mc:MovieClip = e.currentTarget as MovieClip;			mc.nextFrame();			upBtn.stage.addEventListener(MouseEvent.MOUSE_UP, updownBtnUp);						if (step > 0) 			{				stepMove(1);				return;			}						wheelTg = -999999;			speed = 0;			scrollDirection = -1;			timer.start();		}		private function downBtnDown(e:MouseEvent):void		{			var mc:MovieClip = e.currentTarget as MovieClip;			mc.nextFrame();			upBtn.stage.addEventListener(MouseEvent.MOUSE_UP, updownBtnUp);						if (step > 0) 			{				stepMove(-1);				return;			}						wheelTg = -999999;			speed = 0;			scrollDirection = 1;			timer.start();		}		private function updownBtnUp(e:MouseEvent):void		{			if (upBtn != null) upBtn.prevFrame();			if (downBtn != null) downBtn.prevFrame();						upBtn.stage.removeEventListener(MouseEvent.MOUSE_UP, updownBtnUp);			if (step == 0) timer.stop();		}		private function areaClick(e:MouseEvent):void		{			if (control.step > 1) return;						wheelTg = -999999;			var tg:Number = e.localY - btn.height * .5 + control.btnDefaultY;			if (tg < 0) tg = 0;			if (tg > moveArea) tg = moveArea;						btnScroll(tg);		}		private function btnScroll(tg:Number):void		{			var updateFunc:Function = control.tween ? null : directMove;			TweenLite.to(btn, 0.5, {y:tg, ease:Cubic.easeOut, onUpdate:updateFunc});						if (control.tween) moveTg(tg);		}		private function downHandler(e:MouseEvent):void		{			TweenLite.killTweensOf(btn);			btn.startDrag(false, dragRect);			btn.stage.addEventListener(MouseEvent.MOUSE_UP, upHandler);			btn.stage.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}		private function upHandler(e:MouseEvent):void		{			if (step > 0) 			{				var tg:Number = moveArea / (control.step - 1);				tg = MathUtil.multipleRound(btn.y, tg);				btnScroll(tg);			}			btn.stage.removeEventListener(MouseEvent.MOUSE_UP, upHandler);			btn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);			btn.stopDrag();		}		private function moveHandler(e:MouseEvent = null):void		{			var p:Number = (btn.y - control.btnDefaultY) / moveArea;			dispatchEvent(new ScrollerEvent(ScrollerEvent.MOVE, p));		}		private function moveTg(tg:Number):void		{			var p:Number = (tg - control.btnDefaultY) / moveArea;			dispatchEvent(new ScrollerEvent(ScrollerEvent.MOVE, p));		}		private function directMove():void		{			var p:Number = (btn.y - control.btnDefaultY) / moveArea;			dispatchEvent(new ScrollerEvent(ScrollerEvent.MOVE, p, true));		}				public function removeEvent():void		{			TweenLite.killTweensOf(btn);			btn.removeEventListener(MouseEvent.MOUSE_DOWN, downHandler);			area.removeEventListener(MouseEvent.MOUSE_DOWN, areaClick);			if (timer != null) timer.removeEventListener(TimerEvent.TIMER, timerHandler);							if (upBtn != null)			{				if (upBtn.hasEventListener(MouseEvent.MOUSE_DOWN)) upBtn.removeEventListener(MouseEvent.MOUSE_DOWN, upBtnDown);			}						if (downBtn != null)			{				if (downBtn.hasEventListener(MouseEvent.MOUSE_DOWN)) downBtn.removeEventListener(MouseEvent.MOUSE_DOWN, downBtnDown);			}						if (control.wheelEnabled && btn.stage != null)			{				if (btn.stage.hasEventListener(MouseEvent.MOUSE_WHEEL)) btn.stage.removeEventListener(MouseEvent.MOUSE_WHEEL, wheelHandler);			}		}				public function adjustBtn(p:Number):void		{			TweenLite.killTweensOf(btn);			btn.y = -p * moveArea + control.btnDefaultY;		}	}}