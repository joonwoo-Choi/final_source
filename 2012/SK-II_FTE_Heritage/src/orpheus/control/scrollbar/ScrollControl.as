package orpheus.control.scrollbar {	import orpheus.control.scrollbar.events.ScrollerEvent;		import com.greensock.TweenLite;	import com.greensock.easing.Cubic;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;
		/**	 * @author philip	 * 	 * 객체 생성 후 무비클립 설정	 * sc = new ScrollControl();	 * sc.scroll = scrollMc;	 * sc.content = contentMc;	 * sc.wheelArea = wheelAreaMc;	 * sc.mask = maskMc;	 * sc.step = 10 // 10단계로 균등분배되는 스크롤 작렬!	 * sc.fixBtnScale = false; //default	 * sc.tween = true //default	 * sc.tweenTime = 1 //default	 * sc.wheelSpeed = 10 //default	 * sc.init();	 * 	 * 객체 생성과 함께 초기화	 * sc = new ScrollControl(scrollMc, contentMc, maskMc, [etc option]);	 */	 	public class ScrollControl 	{		private var sMc:MovieClip;		private var cMc:DisplayObject;		private var mMc:DisplayObject;		private var fix:Boolean;		private var btn:DisplayObject;		private var area:DisplayObject;		private var btnControl:ScrollerBtnControl;		private var contentArea:Number;		private var _tween:Boolean;		private var _tTime:Number;		private var _wheelEnabled:Boolean;		private var _wheelArea:DisplayObject;		private var _wheelSpeed:Number;		public var btnDefaultY:Number;		public var contentDefaultY:Number;		private  var _step:Number;		private var _contentY:Number;		public function ScrollControl(scrollMovieClip:MovieClip = null, contentMovieClip:DisplayObject = null, maskMovieClip:DisplayObject = null, btnfix:Boolean = false, scrollTween:Boolean = true, _tweentime:Number = 1, _wheel:Boolean = true, _wheelarea:DisplayObject = null, _wheelspeed:Number = 10, Step:Number = 0)		{			sMc = scrollMovieClip;			cMc = contentMovieClip;			mMc = maskMovieClip;			fix = btnfix;			_tween = scrollTween;			_tTime = _tweentime;			_wheelEnabled = _wheel;			_wheelArea = _wheelarea;			_wheelSpeed = _wheelspeed;			_step = Step;						if (sMc && cMc && mMc) init(); 		}		public function init():void		{			if (!sMc || !cMc || !mMc) 			{				trace("각 무비클립을 선언해주세요");				return;			}			btn = sMc["btn"];			area = sMc["area"];			btnDefaultY = btn.y;			contentDefaultY = cMc.y;			_contentY = cMc.y;			btnReset();			reset();		}				public function btnReset():void		{			btnControl = new ScrollerBtnControl(this, cMc, sMc, _wheelArea);			btnControl.addEventListener(ScrollerEvent.MOVE, moveContent);			sMc.addEventListener(Event.REMOVED_FROM_STAGE, removeHandler);		}		private function removeHandler(event:Event):void		{			sMc.removeEventListener(Event.REMOVED_FROM_STAGE, removeHandler);			btnControl.removeEvent();			btnControl.removeEventListener(ScrollerEvent.MOVE, moveContent);		}		private function moveContent(e:ScrollerEvent):void		{			var tg:Number = -e.rate * contentArea + contentDefaultY;			if (_tween && !e.direct)			{				TweenLite.killTweensOf(cMc);				TweenLite.to(cMc, _tTime, {y:tg, ease:Cubic.easeOut, onUpdate:updateContentY});			}			else			{				cMc.y = tg;				_contentY = cMc.y;			}		}				private function updateContentY():void		{			_contentY = cMc.y;		}		public function reset():void		{			TweenLite.killTweensOf(cMc);			cMc.y = contentDefaultY;			contentArea = cMc.height - mMc.height;			var p:Number = mMc.height / cMc.height;			if (p >= 1)			{				btn.visible = false;				btnControl.removeEvent();				return;			}			btn.visible = true;						if (!fix) btn.scaleY = p;			btnControl.reset();		}		public function get scroll():MovieClip		{			return sMc;		}				public function set scroll(mc:MovieClip):void		{			sMc = mc;		}				public function get content():DisplayObject		{			return cMc;		}				public function set content(mc:DisplayObject):void		{			cMc = mc;		}				public function get mask():DisplayObject		{			return mMc;		}				public function set mask(mc:DisplayObject):void		{			mMc = mc;		}				public function get tween():Boolean		{			return _tween;		}				public function set tween(bool:Boolean):void		{			_tween = bool;		}				public function get tweenTime():Number		{			return _tTime;		}				public function set tweenTime(tTime:Number):void		{			_tTime = tTime;		}				public function get fixBtnScale():Boolean		{			return fix;		}				public function set fixBtnScale(fix:Boolean):void		{			this.fix = fix;		}				public function get wheelEnabled():Boolean		{			return _wheelEnabled;		}				public function set wheelEnabled(wheelEnabled:Boolean):void		{			_wheelEnabled = wheelEnabled;		}				public function get wheelArea():DisplayObject		{			return _wheelArea;		}				public function set wheelArea(w:DisplayObject):void		{			_wheelArea = w;		}			public function get wheelSpeed():Number		{			return _wheelSpeed;		}		public function set wheelSpeed(speed:Number):void		{			_wheelSpeed = speed;		}				public function get step():Number		{			return _step;		}				public function set step(s:Number):void		{			_step = s;		}				public function adjustBtn():void		{			btnControl.adjustBtn((cMc.y + contentDefaultY) / contentArea);		}				public function get contentY():Number		{			return _contentY;		}				public function set contentY(contentY:Number):void		{			TweenLite.killTweensOf(cMc);			if (contentY > contentDefaultY) contentY = contentDefaultY;			if (contentY < -contentArea + contentDefaultY) contentY = -contentArea + contentDefaultY;			cMc.y = contentY;			_contentY = cMc.y;			adjustBtn();		}	}}