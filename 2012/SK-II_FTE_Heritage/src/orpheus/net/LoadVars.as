/////////////////////////////////////////////////////////////////////////////////* 서버와의 통신을 위한 클래스 * 주로 사용하는 complete이벤트와 error 이벤트 등록 * 기본적으로 POST방식과 변수 return 방식을 사용 (method / dataFormat 속성으로 변경 가능) *  * [사용 방법] *  * var data = new URLVariables(); * data.id = "p2ri" * new LoadVars(url, data); *  * or *  * var data = new URLVariables(); * data.id = "p2ri"*  * var loadvars = new LoadVars(); * loadvars.sendData = data; * loadvars.sendAndLoad(url, data); *  * loadvars.addEventListener(LoadVarsEvent.COMPLETE, completeHandler); * loadvars.addEventListener(LoadVarsEvent.ERROR, errorHandler); *  * function completeHandler(e:LoadVarsEvent):void * { * 		trace(e.data); //리턴 데이터 URLVariables * 		trace(loadvars.returnData); //속성값으로 데이터 접근 * } *  * function errorHandler(e:LoadVarsEvent):void * { * 		trace(e.error); //error 메시지 * 		trace(e.errorTyle); //error 타입 (IO Error, security Error, url Error) * } *  */////////////////////////////////////////////////////////////////////////////////package orpheus.net{	import orpheus.event.LoadVarsEvent;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;
	public class LoadVars extends URLLoader 	{		//서버 전달 데이터		private var _data:URLVariables;		//데이터 전송 방식 (get / post)		private var _method:String = URLRequestMethod.POST;		//리턴 데이터 format		private var _dataFormat:String = URLLoaderDataFormat.VARIABLES;		private var request:URLRequest;		private var _returnData:*;		public function LoadVars(url:String = null, vars:URLVariables = null, method:String = null, returnDataFormat:String = null) 		{			if (url != null) sendAndLoad(url, vars, method, returnDataFormat);		}		public function sendAndLoad(url:String, vars:URLVariables = null, requestMethod:String = null, returnDataFormat:String = null):void		{			this._data = (vars != null) ? vars : this._data;			this._method = (requestMethod != null) ? requestMethod : this._method;			this._dataFormat = (returnDataFormat != null) ? returnDataFormat : this._dataFormat;						configureListeners();			request = new URLRequest();			request.url = url;			request.method = this._method;						if(_data) request.data = _data;			this.dataFormat = _dataFormat;			this.addEventListener(Event.COMPLETE, completeHandler);						try			{				load(request);			} 			catch (e:Error) 			{				dispatchEvent(new LoadVarsEvent(LoadVarsEvent.ERROR, null, "Unable to load URL", "url"));			}		}		private function configureListeners():void		{			addEventListener(Event.COMPLETE, completeHandler);			addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		}		private function completeHandler(e:Event):void 		{						var loader:URLLoader = URLLoader(e.target);			_returnData = _dataFormat == URLLoaderDataFormat.VARIABLES ? new URLVariables(loader.data) : loader.data;						dispatchEvent(new LoadVarsEvent(LoadVarsEvent.COMPLETE, _returnData));		}		private function securityErrorHandler(e:SecurityErrorEvent):void 		{			dispatchEvent(new LoadVarsEvent(LoadVarsEvent.ERROR, null, String(e.text), "security"));		}		private function ioErrorHandler(e:IOErrorEvent):void 		{			dispatchEvent(new LoadVarsEvent(LoadVarsEvent.ERROR, null, e.toString(), "io"));		}		public function get sendData():URLVariables		{			return _data;		}		public function set sendData(data:URLVariables):void		{			_data = data;		}		public function removeListener():void		{			removeEventListener(Event.COMPLETE, completeHandler);			removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		}		public function get method():String		{			return _method;		}		public function set method(method:String):void		{			_method = method;		}		public function get dataformat():String		{			return _dataFormat;		}		public function set dataformat(returnDataFormat:String):void		{			_dataFormat = returnDataFormat;		}				public function get returnData():*		{			return _returnData;		}	}}