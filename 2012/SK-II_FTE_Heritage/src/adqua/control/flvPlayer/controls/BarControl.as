package adqua.control.flvPlayer.controls {	import adqua.control.flvPlayer.events.SeekEvent;			import flash.geom.Rectangle;		import flash.events.MouseEvent;		import flash.events.EventDispatcher;		import adqua.control.flvPlayer.FLVPlayer;		import flash.display.Sprite;		import flash.events.TimerEvent;		import flash.utils.Timer;		import adqua.control.flvPlayer.BasicStream;		/**	 * @author philip	 */	public class BarControl extends EventDispatcher	{		protected var act:Boolean = true;		protected var timer:Timer;		protected var stream:BasicStream;		protected var _bar:Sprite;		public static const SEEK:String = "SEEK";		private var _seekBtn:Sprite;		private var rect:Rectangle;		private var oldStatus:String;		private var isSeeking:Boolean = false;		public function BarControl(bar:Sprite = null, stream:FLVPlayer = null, seekBtn:Sprite = null)		{			if (!bar || !stream)			{				act = false;				return;			}						this.bar = bar;			this.seekBtn = seekBtn;			this.stream = stream as BasicStream;						timer = new Timer(20);			timer.addEventListener(TimerEvent.TIMER, timerHandler);		}		protected function timerHandler(event:TimerEvent):void		{			adjust();		}		public function play():void		{			if (!act) return;			timer.start();		}		public function stop():void		{			if (!act) return;			timer.stop();		}		public function reset():void		{			if (!act) return;			_bar.scaleX = 0;		}		public function adjust(tg:Number = NaN):void		{			if(!isSeeking) 			{				_bar.scaleX = isNaN(tg) ? stream.ns.time / stream.duration : tg;				if (_bar.scaleX < 0 || isNaN(_bar.scaleX)) _bar.scaleX = 0;				else if (_bar.scaleX > 1) _bar.scaleX = 1;				if (_seekBtn) _seekBtn.x = _bar.x + _bar.width;			}		}				public function dispose():void		{			timer.stop();			removeEvent();			_bar = null;		}				protected function removeEvent():void		{		}		public function pause():void		{			timer.stop();		}				public function resume():void		{			timer.start();		}				public function set bar(bar:Sprite):void		{			_bar = bar;		}		public function get bar():Sprite		{			return _bar;		}				public function set seekBtn(seekBtn:Sprite):void		{			_seekBtn = seekBtn;			if (_seekBtn)			{				rect = new Rectangle(_bar.x, _seekBtn.y, _bar.width, 0);				_seekBtn.addEventListener(MouseEvent.MOUSE_DOWN, startDrag);			}		}				private function startDrag(event:MouseEvent):void		{			isSeeking = true;			_seekBtn.stage.addEventListener(MouseEvent.MOUSE_UP, stopDrag);			_seekBtn.startDrag(false, rect);						oldStatus = stream.nowState;			stream.pause(true, true);			_seekBtn.stage.addEventListener(MouseEvent.MOUSE_MOVE, seekHandler);		}				private function seekHandler(event:MouseEvent):void		{			_bar.width = _seekBtn.x - _bar.x;			var tg:Number = _bar.scaleX;			dispatchEvent(new SeekEvent(SeekEvent.SEEK, tg));		}		private function stopDrag(event:MouseEvent):void		{			isSeeking = false;			_seekBtn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, seekHandler);			_seekBtn.stage.removeEventListener(MouseEvent.MOUSE_UP, stopDrag);			_seekBtn.stopDrag();						if (oldStatus == "play") stream.pause(false, true);		}	}}