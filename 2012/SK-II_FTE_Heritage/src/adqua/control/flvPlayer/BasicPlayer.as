package adqua.control.flvPlayer {	import adqua.control.flvPlayer.events.MovieStatusEvent;		import flash.media.Video;		import adqua.control.flvPlayer.BasicStream;	/**	 * @author philip	 */	public class BasicPlayer extends BasicStream 	{		private var video:Video;		private var _videoWidth:Number;		private var _videoHeight:Number;		private var _videoScaleX:Number;		private var _videoScaleY:Number;		private var _loop:Boolean;		private var _smoothing:Boolean = true;		public function BasicPlayer(fmsURL:String = null, videoWidth:Number = NaN, videoHeight:Number = NaN, loop:Boolean = false)		{			_loop = loop;			_videoHeight = videoHeight;			_videoWidth = videoWidth;			addEventListener(MovieStatusEvent.CREATE_NETSTREAM, createVideo);			addEventListener(MovieStatusEvent.STATUS_EVENT, videoStatusHandler);			if (fmsURL) addEventListener(MovieStatusEvent.PLAY_STATUS_EVENT, videoPlayStatusHandler);			super(fmsURL);		}		private function videoPlayStatusHandler(event:MovieStatusEvent):void		{			switch(event.code)			{				case MovieStatusEvent.NETSTREAM_PLAY_COMPLETE : 					if (loop) play(); 					break;			}		}		private function videoStatusHandler(event:MovieStatusEvent):void		{			switch(event.code)			{				case MovieStatusEvent.NETSTREAM_PLAY_STOP : 					if (loop && !fmsURL) play(); 					break;			}		}		private function createVideo(event:MovieStatusEvent):void		{			if (isNaN(videoWidth) || isNaN(videoHeight))			{				return;				}						video = new Video();			video.width = videoWidth;			video.height = videoHeight;			video.smoothing = _smoothing;			video.attachNetStream(ns);			addChild(video);			dispatchEvent(new MovieStatusEvent(MovieStatusEvent.CREATE_VIDEO));		}		public function clear():void		{			if (video) video.clear();		}		public function get videoWidth():Number		{			return _videoWidth;		}		public function set videoWidth(videoWidth:Number):void		{			if (video) 			{				video.width = videoWidth;				_videoScaleX = video.scaleX;			}			_videoWidth = videoWidth;		}		public function get videoHeight():Number		{			return _videoHeight;		}		public function set videoHeight(videoHeight:Number):void		{			if (video) 			{				video.height = videoHeight;				_videoScaleY = video.scaleY;			}			_videoHeight = videoHeight;		}				public function get videoScaleX():Number		{			return _videoScaleX;		}		public function set videoScaleX(videoScaleX:Number):void		{			if (video) 			{				video.scaleX = videoScaleX;				_videoWidth = video.width;			}			_videoScaleX = videoScaleX;		}		public function get videoScaleY():Number		{			return _videoScaleY;		}		public function set videoScaleY(videoScaleY:Number):void		{			if (video) 			{				video.scaleY = videoScaleY;				_videoHeight = video.height;			}			_videoScaleY = videoScaleY;		}		public function get loop():Boolean		{			return _loop;		}		public function set loop(loop:Boolean):void		{			_loop = loop;		}				public function get smoothing():Boolean		{			return _smoothing;		}				public function set smoothing(smoothing:Boolean):void		{			_smoothing = smoothing;			if (video) video.smoothing = smoothing;		}	}}