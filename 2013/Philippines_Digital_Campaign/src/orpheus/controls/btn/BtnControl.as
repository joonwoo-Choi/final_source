package orpheus.controls.btn {	import flash.display.SimpleButton;		import flash.display.InteractiveObject;	
	import flash.events.EventDispatcher;			import orpheus.movieclip.Frame;			import flash.events.MouseEvent;		import flash.display.MovieClip;	import orpheus.controls.btn.events.BtnEvent;		/**	 * @author philip	 */	public class BtnControl extends EventDispatcher	{		private var _data:*;		private var mc:MovieClip;		private var _over:Boolean = true;		private var _selected:Boolean = false;		private var _buttonMode:Boolean = true;		private var _enabled:Boolean = true;		private var _doubleClickEnabled:Boolean;		public function BtnControl(mc:MovieClip, data:* = null)		{			this.mc = mc;			this.mc.stop();			this.data = data;			var btn:SimpleButton = mc.getChildByName("btn") as SimpleButton;			if (!btn) buttonMode = _buttonMode;			var _mc:InteractiveObject = btn ? btn : mc;			_mc.addEventListener(MouseEvent.ROLL_OVER, overHandler);			_mc.addEventListener(MouseEvent.ROLL_OUT, outHandler);			_mc.addEventListener(MouseEvent.CLICK, clickHandler);			doubleClickEnabled = _doubleClickEnabled;		}				private function outHandler(event:MouseEvent):void		{			if (mouseOver && !selected) Frame.control(mc, 1);			dispatchEvent(new BtnEvent(BtnEvent.ROLL_OUT, mc, data));		}		private function overHandler(event:MouseEvent):void		{			if (mouseOver) Frame.control(mc, mc.totalFrames);			dispatchEvent(new BtnEvent(BtnEvent.ROLL_OVER, mc, data));		}		private function clickHandler(event:MouseEvent):void		{			dispatchEvent(new BtnEvent(BtnEvent.CLICK, mc, data));		}				private function doubleClickHandler(event:MouseEvent):void		{			dispatchEvent(new BtnEvent(BtnEvent.DOUBLE_CLICK, mc, data));		}				public function dispose():void		{			buttonMode = false;			var btn:SimpleButton = mc.getChildByName("btn") as SimpleButton;			var _mc:InteractiveObject = btn ? btn : mc;			_mc.removeEventListener(MouseEvent.ROLL_OVER, overHandler);			_mc.removeEventListener(MouseEvent.ROLL_OUT, outHandler);			_mc.removeEventListener(MouseEvent.CLICK, clickHandler);			mc = null;					}				public function get mouseOver():Boolean		{			return _over;		}				public function set mouseOver(over:Boolean):void		{			_over = over;		}				public function get data():*		{			return _data;		}				public function set data(data:*):void		{			_data = data;		}				public function get selected():Boolean		{			return _selected;		}				public function set selected(selected:Boolean):void		{			_selected = selected;			if (!selected) Frame.control(mc, 1);			else Frame.control(mc, mc.totalFrames);		}				public function get buttonMode():Boolean		{			return _buttonMode;		}				public function set buttonMode(buttonMode:Boolean):void		{			_buttonMode = buttonMode;			mc.buttonMode = buttonMode; 		}				public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(enabled:Boolean):void		{			_enabled = enabled;			mc.mouseEnabled = enabled;			mc.mouseChildren = enabled;		}				public function get doubleClickEnabled():Boolean		{			return _doubleClickEnabled;		}				public function set doubleClickEnabled(doubleClickEnabled:Boolean):void		{			_doubleClickEnabled = doubleClickEnabled;						var btn:SimpleButton = mc.getChildByName("btn") as SimpleButton;			var _mc:InteractiveObject = btn ? btn : mc;			_mc.doubleClickEnabled = doubleClickEnabled;						if (_doubleClickEnabled)			{				_mc.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);			}			else			{				_mc.removeEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);			}		}	}}