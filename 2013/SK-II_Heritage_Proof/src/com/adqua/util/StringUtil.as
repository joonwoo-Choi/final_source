package com.adqua.util{	/**	 * MZ Package 1.0	 * @author INEX	 */	public class StringUtil	{		/**		 * 주소에서 파일명을 제외한 디렉토리를 반환합니다.		 */		public static function getDirectory(str:String):String		{			/*			var arr:Array = str.split("?");			str = arr[0];			var n1:int = str.lastIndexOf("\\");			var n2:int = str.lastIndexOf("/");			var char:String = (n1 > n2) ? "\\" : "/";			return str.substring(0, str.lastIndexOf(char)) + "/";			 * 			 */			str = str.split("?")[0];			var regExp:RegExp = /(?P<url>.*[\/\\]).+\.swf/i;			var arr:Array = regExp.exec(str);			if (arr)return arr["url"];			else return "";		}		/**		 *  dividesNum 자리씩 dividesCharacter 를 추가하여 반환합니다. order가 true일경우 앞에서부터 dividesNum 자리씩 추가합니다.		 */		public static function comma(str:*, dividesNum:uint = 3, dividesCharacter:String = ",", order:Boolean = false):String		{			if (!(str is String || str is Number)) return null;			var result:String = "";			var num:String = String(str);			var tmp:uint = 0;			if (!order)			{				tmp = num.length % dividesNum;				if (tmp == 0) tmp = 3;				result = num.substr(0, tmp);			}			for (var i:uint = tmp; i < num.length; i += dividesNum)			{				result = result + ((order && i == 0) ? "" : dividesCharacter) + num.substr(i, dividesNum);			}			return result;		}		/**		 * 기본 replace option : g ->global, i -> ignoreCase, m -> multiline		 */		public static function replace(str:String, oriStr:String, reStr:String, option:String = "gim"):String		{			var myPattern:RegExp = new RegExp(oriStr, option);			str = str.replace(myPattern, reStr);  			return str;		}		/**		 * 문자열 존재여부 체크  option : g ->global, i -> ignoreCase, m -> multiline		 */		public static function ereg(str:String, eregStr:String, option:String = "gim"):Boolean		{			var myPattern:RegExp = new RegExp(eregStr, option);			return myPattern.exec(str);		}		/**		 * 이메일 주소의 유효성 체크		 */		public static function isEmail(str:String):Boolean		{			var myPattern:RegExp = /.+@.+\.[\w.-]*[a-z]$/i;			return myPattern.test(str);		}		/**		 * 한글 길이를 2로 계산하여 글자수 체크		 */		public static function getByteLength(str:String):uint		{			return str.length + (escape(str) + "%u").match(/%u/g).length - 1;		}		/**		 * 공백(space)만 있는지 확인!! 공백만 있으면 true		 */		public static function isBlank(str:String):Boolean		{			str = StringUtil.replace(str, " ", "");			if (str.length) return false;			else return true;		}		/**		 * 앞뒤 트림		 */		public static function trim(str:String, char:String):String 		{			return trimBack(trimFront(str, char), char);		}		public static function trimFront(str:String, char:String):String 		{			char = stringToCharacter(char);			if (str.charAt(0) == char) 			{				str = trimFront(str.substring(1), char);			}			return str;		}		public static function trimBack(str:String, char:String):String 		{			char = stringToCharacter(char);			if (str.charAt(str.length - 1) == char) 			{				str = trimBack(str.substring(0, str.length - 1), char);			}			return str;		}		public static function stringToCharacter(str:String):String 		{			if (str.length == 1) 			{				return str;			}			return str.slice(0, 1);		}	}}